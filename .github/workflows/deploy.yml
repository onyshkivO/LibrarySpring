# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "rework-docker","rework-with-jwt-and-aws" ]
  pull_request:
    branches: [ "rework-docker","rework-with-jwt-and-aws" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven(tests)
        run: mvn clean install
      - name: Login to docker hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
      - name: Build docker image
        run: docker build -t onyshkiv/library .
      - name: Publish image to docker hub
        run: docker push onyshkiv/library:latest

  deploy:
    needs: build
    runs-on: [ aws-ec2 ]
    steps:
      - name: Pull Image from docker hub
        run: sudo docker pull onyshkiv/library:latest
      - name: Delete old container
        run: sudo docker rm -f library-container
      - name: Run docker container
        run: sudo docker run -d -p 8080:8080 -e SYS_PROPS=" -DDATABASE_HOST=${{secrets.DATABASE_HOST}} -DDATABASE=${{secrets.DATABASE}} -DDATABASE_USER=${{secrets.DATABASE_USER}} -DDATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}} -DDDL_AUTO=${{secrets.DDL_AUTO}}" --name library-container onyshkiv/library